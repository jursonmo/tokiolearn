
https://www.bilibili.com/video/BV1uZ4y1W738?p=2&vd_source=a9d7dbdcb2d0f25431af0ed4f0760fc8
async
future::join!(task1,task2) //为啥先执行task1 再task2

1. server 停掉后，client 如何重连(fixed) 
2. client 停掉后，server 如何处理(fixed) 
3. miniredis 如何通过mpsc 实现cmd 传递。 oneshot channel
4. 考虑 Arc 是否有性能问题, fdb get insert 的性能问题。 fdb 可否用读写锁？
5. tx 如何当成函数的参数传递进函数里？
6. broadcast时，不想clone分配很多份data 内存，是不是可以用Arc 来减少内存的分配，还是用RefCell？
    broadcast channel???
6.1: tcp 粘包问题。
6.2 tokio::io::BufReader
6.3 tokio::select!
tokio::select! {
  result = r.read_line(&mut line) => {
    if result.unwrap() == 0 {
      break;
    } 
    println!("recv: {}", line); 
    line.clear(); 
  }
 result = rx.recv() => { 
    let msg = result.unwrap();
    println!("msg send: {}", msg); 
    w.write_all(msg.as_bytes()).await.unwrap(); 
 } 
} 

7.
= help: the trait `FromIterator<String>` is not implemented for `Vec<&str>`
  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`
8. 导入一个Read,? 本地代码才可以调用socket.Read()? 
use std::convert::TryInto;

fn main() {
   let a: u8 = 10;
   let b: u16 = 1500;

   let b_: u8 = b.try_into().unwrap();

   if a < b_ {
     println!("Ten is less than one hundred.");
   }
}
上面代码中引入了 std::convert::TryInto 特征，但是却没有使用它，可能有些同学会为此困惑，主要原因在于如果你要使用一个特征的方法，
那么你需要引入该特征到当前的作用域中，我们在上面用到了 try_into 方法，因此需要引入对应的特征。但是 Rust 又提供了一个非常便利的办法，
把最常用的标准库中的特征通过std::prelude模块提前引入到当前作用域中，其中包括了 std::convert::TryInto，你可以尝试删除第一行的代码 use ...，看看是否会报错。

9.  mini_redis: 
10. 怎么阅读rust 源码

11. let _: SocketAddr = addr.parse().unwrap()
    如果不用unwrap, 左边应该怎么写, 即怎么写Resutl<SocketAddr, err>中的err


    pub fn parse<F: FromStr>(&self) -> Result<F, F::Err> {
      FromStr::from_str(self)
  }

  就是要找到 SocketAddr 实现FromStr trait 时, 在 FromStr::Err 赋予是什么值

  https://doc.rust-lang.org/std/net/enum.SocketAddr.html#impl-FromStr-for-SocketAddr

  https://doc.rust-lang.org/src/std/net/parser.rs.html#434-439
  impl FromStr for SocketAddr {
    type Err = AddrParseError;
    fn from_str(s: &str) -> Result<SocketAddr, AddrParseError> {
        Self::parse_ascii(s.as_bytes())
    }
}
  可以看到是 AddrParseError
  具体路径：
  Struct std::net::AddrParseErrorCopy 

  所以最终写法：
```rust
  let x: std::result::Result<SocketAddr, std::net::AddrParseError> = addr.parse();
  if let Ok(s) = x {
      println!("socket addr:{:?}", s);
  } else if let Err(e) = x {
      println!("socket addr:{} invalid, err:{}", addr, e);
      return Ok(());
  }
```